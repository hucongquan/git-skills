# Git 学习总结

## 建版本库
初始化一个Git仓库
    git init

添加文件到Git仓库，分两步：
1）注意，可反复多次使用，添加多个文件
    git add <file>
2）提交
    git commit -m <message>

## 刻掌握仓库当前的状态
    git status
如果git status告诉你有文件被修改过，用git diff可以查看修改内容。


## 版本回退
HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。
    git reset --hard HEAD^
穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。
要重返未来
    git reflog
    查看命令历史，以便确定要回到未来的哪个版本。



## 管理修改
提交后，用`git diff HEAD -- readme.txt`命令可以查看工作区和版本库里面最新版本的区别.
> 第一次修改 -> git add -> 第二次修改 -> git add -> git commit


## 撤销修改
```
(use "git reset HEAD <file>..." to unstage)
(use "git checkout -- <file>..." to discard changes in working directory)
```
场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，
第一步用命令git reset HEAD <file>，就回到了场景1，
第二步按场景1操作。
场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。


## 删除文件
    git rm <file>
用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。


## 远程仓库
第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。
如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：
    ssh-keygen -t rsa -C "youremail@example.com"
第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容：


## 添加远程库
要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；
    git remote add origin git@github.com:peterhu/learn.git

关联后，使用命令git push -u origin master第一次推送master分支的所有内容；
此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改。


## 从远程库克隆
    git clone git@github.com:peterhu/gitskills.git
要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。
Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。



## 创建与合并分支
git checkout命令加上-b参数表示创建并切换
    git checkout -b dev
    查看分支：git branch
    创建分支：git branch <name>
    切换分支：git checkout <name>或者git switch <name>
    创建+切换分支：git checkout -b <name>或者git switch -c <name>
    合并某分支到当前分支：git merge <name>
    删除分支：git branch -d <name>


## 解决冲突
当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。
解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。
用git log --graph命令可以看到分支合并图。用带参数的git log也可以看到分支的合并情况：
    git log --graph --pretty=oneline --abbrev-commit


## 分支管理策略
请注意`--no-ff`参数，表示禁用`Fast forward`
Git分支十分强大，在团队开发中应该充分应用。
合并分支时，加上`--no-ff`参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。


## Bug分支
修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；
当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再`git stash pop`，回到工作现场；
在master分支上修复的bug，想要合并到当前dev分支，可以用`git cherry-pick <commit>`命令，把bug提交的修改“复制”到当前分支，避免重复劳动。

用git cherry-pick，我们就不需要在dev分支上手动再把修bug的过程重复一遍：
    git cherry-pick <commit_id>
强行删除分支
    git branch -D <name>


## 多人协作
首先，可以试图用`git push origin <branch-name>`推送自己的修改；
如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
如果合并有冲突，则解决冲突，并在本地提交；
没有冲突或者解决掉冲突后，再用`git push origin <branch-name>`推送就能成功！
如果`git pull`提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令
    git branch --set-upstream-to <branch-name> origin/<branch-name>
查看远程库信息:
    git remote -v
本地新建的分支如果不推送到远程，对其他人就是不可见的；
从本地推送分支:
    git push origin branch-name,如果推送失败，先用`git pull`抓取远程的新提交；
在本地创建和远程分支对应的分支:
    git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
建立本地分支和远程分支的关联:
    git branch --set-upstream branch-name origin/branch-name
从远程抓取分支，使用`git pull`，如果有冲突，要先处理冲突。


## Rebase
rebase操作可以把本地未push的分叉提交历史整理成直线；
rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。



## 标签管理
命令`t tag <tagname>`用于新建一个标签，默认为HEAD，也可以指定一个commit id;
    git tag <tagname> <ommit id>
    命令git tag -a <tagname> -m "blablabla..."可以指定标签信息；
    命令git tag`可以查看所有标签。
    命令git push origin <tagname>可以推送一个本地标签；
    命令git push origin --tags可以推送全部未推送过的本地标签；
    命令git tag -d <tagname>可以删除一个本地标签；
    命令git push origin :refs/tags/<tagname>可以删除一个远程标签。


## 使用GitHub
在GitHub上，可以任意Fork开源仓库；
自己拥有Fork后的仓库的读写权限；
可以推送pull request给官方仓库来贡献代码。


## 忽略特殊文件
加上你自己定义的文件，最终得到一个完整的.gitignore文件，内容如下：
```
# Windows:
Thumbs.db
ehthumbs.db
Desktop.ini

# Python:
*.py[cod]
*.so
*.egg
*.egg-info
dist
build

# My configurations:
db.ini
deploy_key_rsa
```


如果你确实想添加该文件，可以用-f强制添加到Git：
    git add -f App.class
忽略某些文件时，需要编写.gitignore；
.gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理！


## 配置别名
我们只需要敲一行命令，告诉Git，以后st就表示status：
    git config --global alias.st status
当然还有别的命令可以简写，很多人都用co表示checkout，ci表示commit，br表示branch：
    git config --global alias.co checkout
    git config --global alias.ci commit
    git config --global alias.br branch
配置Git的时候，加上--global是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。
